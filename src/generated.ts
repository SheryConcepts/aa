// Generated by @wagmi/cli@0.1.15 on 5/6/2023 at 11:33:44 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SheryToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sheryTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'sheryToken',
        internalType: 'string',
        type: 'string',
      },
      {
        name: 'ST',
        internalType: 'string',
        type: 'string',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'to',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'addressTime',
    outputs: [
      {
        name: '',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        name: '',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        name: '',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: '_amount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'buy',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [
      { name: '', internalType: 'uint8', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'subtractedValue',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'faucet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'addedValue',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'to',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [
      { name: '', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [
      {
        name: '',
        internalType: 'address',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [
      { name: '', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        name: '',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'to',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'to',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sheryTokenABI}__.
 */
export function useSheryToken(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: sheryTokenABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sheryTokenABI}__.
 */
export function useSheryTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof sheryTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sheryTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: sheryTokenABI,
    ...config,
  } as UseContractReadConfig<
    typeof sheryTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"addressTime"`.
 */
export function useSheryTokenAddressTime<
  TSelectData = ReadContractResult<
    typeof sheryTokenABI,
    'addressTime'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sheryTokenABI,
      'addressTime',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sheryTokenABI,
    functionName: 'addressTime',
    ...config,
  } as UseContractReadConfig<
    typeof sheryTokenABI,
    'addressTime',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useSheryTokenAllowance<
  TSelectData = ReadContractResult<
    typeof sheryTokenABI,
    'allowance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sheryTokenABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sheryTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof sheryTokenABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSheryTokenBalanceOf<
  TSelectData = ReadContractResult<
    typeof sheryTokenABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sheryTokenABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sheryTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof sheryTokenABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useSheryTokenDecimals<
  TSelectData = ReadContractResult<
    typeof sheryTokenABI,
    'decimals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sheryTokenABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sheryTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof sheryTokenABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"name"`.
 */
export function useSheryTokenName<
  TSelectData = ReadContractResult<
    typeof sheryTokenABI,
    'name'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sheryTokenABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sheryTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof sheryTokenABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useSheryTokenOwner<
  TSelectData = ReadContractResult<
    typeof sheryTokenABI,
    'owner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sheryTokenABI,
      'owner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sheryTokenABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof sheryTokenABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useSheryTokenSymbol<
  TSelectData = ReadContractResult<
    typeof sheryTokenABI,
    'symbol'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sheryTokenABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sheryTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof sheryTokenABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useSheryTokenTotalSupply<
  TSelectData = ReadContractResult<
    typeof sheryTokenABI,
    'totalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sheryTokenABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sheryTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof sheryTokenABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__.
 */
export function useSheryTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    TFunctionName
  >({ abi: sheryTokenABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useSheryTokenApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'approve'
  >({
    abi: sheryTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"buy"`.
 */
export function useSheryTokenBuy<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'buy'
        >['abi'],
        'buy'
      > & { functionName?: 'buy' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'buy'
      > & {
        abi?: never
        functionName?: 'buy'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'buy'
  >({
    abi: sheryTokenABI,
    functionName: 'buy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useSheryTokenDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'decreaseAllowance'
  >({
    abi: sheryTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"faucet"`.
 */
export function useSheryTokenFaucet<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'faucet'
        >['abi'],
        'faucet'
      > & { functionName?: 'faucet' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'faucet'
      > & {
        abi?: never
        functionName?: 'faucet'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'faucet'
  >({
    abi: sheryTokenABI,
    functionName: 'faucet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useSheryTokenIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'increaseAllowance'
  >({
    abi: sheryTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useSheryTokenMint<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'mint'
        >['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'mint'
      > & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'mint'
  >({
    abi: sheryTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSheryTokenRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'renounceOwnership'
  >({
    abi: sheryTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useSheryTokenTransfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'transfer'
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'transfer'
  >({
    abi: sheryTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSheryTokenTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'transferFrom'
  >({
    abi: sheryTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSheryTokenTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'transferOwnership'
  >({
    abi: sheryTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"withdraw"`.
 */
export function useSheryTokenWithdraw<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sheryTokenABI,
          'withdraw'
        >['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<
        TMode,
        typeof sheryTokenABI,
        'withdraw'
      > & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof sheryTokenABI,
    'withdraw'
  >({
    abi: sheryTokenABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__.
 */
export function usePrepareSheryTokenWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSheryTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"buy"`.
 */
export function usePrepareSheryTokenBuy(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'buy'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'buy',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'buy'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareSheryTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"faucet"`.
 */
export function usePrepareSheryTokenFaucet(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'faucet'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'faucet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'faucet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareSheryTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareSheryTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'mint'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'mint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSheryTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareSheryTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'transfer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSheryTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSheryTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sheryTokenABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareSheryTokenWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sheryTokenABI,
      'withdraw'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sheryTokenABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sheryTokenABI,
    'withdraw'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sheryTokenABI}__.
 */
export function useSheryTokenEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof sheryTokenABI,
      TEventName
    >,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: sheryTokenABI,
    ...config,
  } as UseContractEventConfig<
    typeof sheryTokenABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sheryTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useSheryTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<
      typeof sheryTokenABI,
      'Approval'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sheryTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<
    typeof sheryTokenABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sheryTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSheryTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof sheryTokenABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sheryTokenABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof sheryTokenABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sheryTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSheryTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<
      typeof sheryTokenABI,
      'Transfer'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sheryTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<
    typeof sheryTokenABI,
    'Transfer'
  >)
}
